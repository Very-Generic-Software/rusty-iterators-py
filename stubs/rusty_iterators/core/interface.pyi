from __future__ import annotations

from collections.abc import Callable
from typing import Any, Generic, TypeAlias, final

from rusty_iterators._versioned_types import Self, TypeVar, override
from rusty_iterators.lib._async import AsyncIterAdapter

T = TypeVar("T", default=Any, covariant=True)
R = TypeVar("R", default=Any, covariant=True)

FilterCallable: TypeAlias = Callable[[T], bool]
MapCallable: TypeAlias = Callable[[T], R]

class IterInterface(Generic[T]):
    def __iter__(self) -> Self: ...
    def __next__(self) -> T: ...
    def next(self) -> T: ...
    def as_async(self) -> AsyncIterAdapter[T]: ...
    def collect(self) -> list[T]: ...
    def filter(self, func: FilterCallable[T]) -> Filter[T]: ...
    def map[R](self, func: MapCallable[T, R]) -> Map[T, R]: ...
    def cycle(self, use_cache: bool = True) -> CacheCycle[T]: ...

@final
class Filter(IterInterface[T], Generic[T]):
    def __init__(self, other: IterInterface[T], func: FilterCallable[T]) -> None: ...
    @override
    def next(self) -> T: ...
    def can_be_copied(self) -> bool: ...
    def copy(self) -> Filter[T]: ...

@final
class Map(IterInterface[R], Generic[T, R]):
    def __init__(self, it: IterInterface[T], func: MapCallable[T, R]) -> None: ...
    @override
    def next(self) -> R: ...
    def can_be_copied(self) -> bool: ...
    def copy(self) -> Map[T, R]: ...

@final
class CacheCycle(IterInterface[T], Generic[T]):
    def __init__(self, it: IterInterface[T]) -> None: ...
    def can_be_copied(self) -> bool: ...
    def copy(self) -> CacheCycle[T]: ...

@final
class CopyCycle(IterInterface[T], Generic[T]):
    def __init__(self, it: IterInterface[T]) -> None: ...
    def can_be_copied(self) -> bool: ...
    def copy(self) -> CopyCycle[T]: ...
